version: '3.7'

services:
  postgres:
    image: postgres
    container_name: postgresql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: P@55w0rd
    command: >
      postgres -c wal_level=logical -c max_wal_senders=2 -c max_replication_slots=2
    restart: on-failure
    ports:
      - '5432:5432'
    networks:
      - silosnet
    volumes:
      - './scripts/db_init.sql:/docker-entrypoint-initdb.d/db_init.sql'

  # connect:
    # image: debezium/connect
    # container_name: connect
    # ports:
      # - '8083:8083'
    # restart: on-failure
    # environment:
      # BOOTSTRAP_SERVERS: 'kafka:9092'
      # GROUP_ID: 1
      # CONFIG_STORAGE_TOPIC: CONNECT_CONFIGS
      # OFFSET_STORAGE_TOPIC: CONNECT_OFFSETS
      # STATUS_STORAGE_TOPIC: CONNECT_STATUSES
    # depends_on:
      # - postgres
      # - kafka
    # networks:
      # - silosnet

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_container
    environment:
      PGADMIN_DEFAULT_EMAIL: '${PGADMIN_DEFAULT_EMAIL:-pgadmintest@pgadmin.org}'
      PGADMIN_DEFAULT_PASSWORD: '${PGADMIN_DEFAULT_PASSWORD:-@dm1n}'
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - 'pgadmin:/var/lib/pgadmin'
    ports:
      - '${PGADMIN_PORT:-5050}:80'
    depends_on:
      - postgres
    networks:
      - silosnet

  # zookeeper:
    # image: confluentinc/cp-zookeeper:7.0.1
    # hostname: zookeeper
    # container_name: zookeeper
    # restart: on-failure
    # networks:
      # - ecommercedddnet
    # ports:
      # - '2181:2181'
    # environment:
      # ZOOKEEPER_CLIENT_PORT: 2181
      # ZOOKEEPER_TICK_TIME: 2000
  
  # kafka:
    # image: confluentinc/cp-kafka:7.0.1
    # hostname: kafka
    # container_name: kafka
    # networks:
      # - silosnet
    # restart: on-failure
    # ports:
      # - '29092:29092'
      # - '9092:9092'
    # environment:
      # KAFKA_BROKER_ID: 1
      # KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      # KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092'
      # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    # depends_on:
      # - zookeeper
    

  # init-kafka:
    # image: confluentinc/cp-kafka:7.0.1
    # entrypoint:
      # - /bin/sh
      # - '-c'
    # networks:
      # - ecommercedddnet
    # command: >
      # kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic Payments --replication-factor 1 --partitions 1 &&
      # kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic Shipments --replication-factor 1 --partitions 1
    # restart: on-failure
    # depends_on:
      # - kafka

  # kafka_topics_ui:
    # image: provectuslabs/kafka-ui:latest
    # hostname: kafka-ui
    # ports:
      # - '8080:8080'
    # environment:
      # KAFKA_CLUSTERS_0_NAME: local
      # KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:29092'
    # networks:
      # - silosnet
    # restart: on-failure
    # depends_on:
      # - kafka

  silos-identityserver:
    image: silos-identityserver
    container_name: silos-identityserver
    build:
      context: .
      dockerfile: src/Crosscutting/Silos.IdentityServer/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
      ASPNETCORE_URLS: 'http://+:80'
    restart: on-failure
    ports:
      - '5001:80'
    networks:
      - silosnet

  silos-apigateway:
    image: silos-apigateway
    container_name: silos-apigateway
    build:
      context: .
      dockerfile: src/Crosscutting/Silos.ApiGateway/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
      ASPNETCORE_URLS: 'http://+:80'
    restart: on-failure
    ports:
      - '5000:80'
    depends_on:
      - postgres
      - silos-identityserver
    networks:
      - silosnet

  silos-customers:
    image: silos-customers
    container_name: silos-customers
    build:
      context: .
      dockerfile: src/Services/Silos.Customers/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
      ASPNETCORE_URLS: 'http://+:80'
    restart: on-failure
    ports:
      - '8001:80'
    networks:
      - silosnet
    depends_on:
      - postgres
      - silos-apigateway

  # ecommerceddd-products:
    # image: ecommerceddd-products
    # container_name: ecommerceddd-products
    # build:
      # context: .
      # dockerfile: src/Services/EcommerceDDD.Products/Dockerfile
    # environment:
      # ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
      # ASPNETCORE_URLS: 'http://+:80'
    # restart: on-failure
    # ports:
      # - '8002:80'
    # networks:
      # - ecommercedddnet
    # depends_on:
      # - postgres
      # - ecommerceddd-apigateway

  # ecommerceddd-orders:
    # image: ecommerceddd-orders
    # container_name: ecommerceddd-orders
    # build:
      # context: .
      # dockerfile: src/Services/EcommerceDDD.Orders/Dockerfile
    # environment:
      # ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
      # ASPNETCORE_URLS: 'http://+:80'
    # restart: on-failure
    # ports:
      # - '8004:80'
    # networks:
      # - ecommercedddnet
    # depends_on:
      # - postgres
      # - ecommerceddd-apigateway

  # ecommerceddd-payments:
    # image: ecommerceddd-payments
    # container_name: ecommerceddd-payments
    # build:
      # context: .
      # dockerfile: src/Services/EcommerceDDD.Payments/Dockerfile
    # environment:
      # ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
      # ASPNETCORE_URLS: 'http://+:80'
    # restart: on-failure
    # ports:
      # - '8005:80'
    # networks:
      # - ecommercedddnet
    # depends_on:
      # - postgres
      # - ecommerceddd-apigateway
      # - connect  

networks:
  silosnet:
    driver: bridge

volumes:
  postgres:
  pgadmin:
